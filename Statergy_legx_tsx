import React from 'react';
import { DollarSign, Shield, Target, Layers, Zap } from 'lucide-react';

interface Lego {
  id: string;
  type: string;
  name: string;
  description: string;
  icon: any;
  color: string;
  params?: string[];
}

interface StrategyLegoProps {
  lego: Lego;
  isSelected?: boolean;
}

const StrategyLego: React.FC<StrategyLegoProps> = ({ lego, isSelected = false }) => {
  const getColorClasses = (color: string, isSelected: boolean) => {
    const colors = {
      green: isSelected 
        ? 'bg-green-500/20 border-green-500/50 text-green-300' 
        : 'bg-green-500/10 border-green-500/30 text-green-400 hover:bg-green-500/20',
      blue: isSelected 
        ? 'bg-blue-500/20 border-blue-500/50 text-blue-300' 
        : 'bg-blue-500/10 border-blue-500/30 text-blue-400 hover:bg-blue-500/20',
      purple: isSelected 
        ? 'bg-purple-500/20 border-purple-500/50 text-purple-300' 
        : 'bg-purple-500/10 border-purple-500/30 text-purple-400 hover:bg-purple-500/20',
      pink: isSelected 
        ? 'bg-pink-500/20 border-pink-500/50 text-pink-300' 
        : 'bg-pink-500/10 border-pink-500/30 text-pink-400 hover:bg-pink-500/20',
      yellow: isSelected 
        ? 'bg-yellow-500/20 border-yellow-500/50 text-yellow-300' 
        : 'bg-yellow-500/10 border-yellow-500/30 text-yellow-400 hover:bg-yellow-500/20',
      indigo: isSelected 
        ? 'bg-indigo-500/20 border-indigo-500/50 text-indigo-300' 
        : 'bg-indigo-500/10 border-indigo-500/30 text-indigo-400 hover:bg-indigo-500/20',
    };
    return colors[color] || colors.blue;
  };

  const Icon = lego.icon;

  return (
    <div className={`p-4 rounded-xl border backdrop-blur-xl transition-all ${getColorClasses(lego.color, isSelected)} ${
      isSelected ? 'transform scale-105' : 'hover:transform hover:scale-105'
    }`}>
      <div className="flex items-start space-x-3">
        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${
          isSelected ? 'bg-white/20' : 'bg-white/10'
        }`}>
          <Icon className="w-5 h-5" />
        </div>
        
        <div className="flex-1 min-w-0">
          <h3 className="font-semibold text-sm mb-1">{lego.name}</h3>
          <p className="text-xs opacity-80 mb-2">{lego.description}</p>
          
          {lego.params && lego.params.length > 0 && (
            <div className="flex flex-wrap gap-1">
              {lego.params.map((param, index) => (
                <span
                  key={index}
                  className="px-2 py-1 bg-white/10 rounded text-xs opacity-70"
                >
                  {param}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
      
      {lego.type === 'entry' && (
        <div className="mt-2 text-xs opacity-60">Entry Point</div>
      )}
    </div>
  );
};

export default StrategyLego;
